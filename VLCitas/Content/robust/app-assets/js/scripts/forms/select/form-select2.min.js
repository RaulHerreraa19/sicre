!function (e, t, r) {
    "use strict"; function s(e) { e.element; return e.id ? "<i class='fa fa-" + r(e.element).data("icon") + "'></i>" + e.text : e.text }
    r(".selectPatient").selectPatient(),
        r(".selectPatient-placeholder").selectPatient({ placeholder: "Select a state", allowClear: !0 }),
        r(".selectPatient-icons").selectPatient({ minimumResultsForSearch: 1 / 0, templateResult: s, templateSelection: s, escapeMarkup: function (e) { return e } }),
        r(".selectPatient-placeholder-multiple").selectPatient({ placeholder: "Select State" }),
        r(".hide-search").selectPatient({ minimumResultsForSearch: 1 / 0 }),
        r(".max-length").selectPatient({ maximumSelectionLength: 2, placeholder: "Select maximum 2 items" });
    var a = r(".js-example-events");
    a.selectPatient({ placeholder: "DOM Events" }), a.on("selectPatient:open",
        function (e) { alert("Open Event Fired.") }), a.on("selectPatient:close", function (e) { alert("Close Event Fired.") }), a.on("selectPatient:select", function (e) { alert("Select Event Fired.") }), a.on("selectPatient:unselect", function (e) { alert("Unselect Event Fired.") }), a.on("change", function (e) { alert("Change Event Fired.") }); var c = r(".js-example-programmatic").selectPatient(), l = r(".js-example-programmatic-multi").selectPatient(); l.selectPatient({ placeholder: "Programmatic Events" }), r(".js-programmatic-set-val").on("click", function () { c.val("CA").trigger("change") }), r(".js-programmatic-open").on("click", function () { c.selectPatient("open") }), r(".js-programmatic-close").on("click", function () { c.selectPatient("close") }), r(".js-programmatic-init").on("click", function () { c.selectPatient() }), r(".js-programmatic-destroy").on("click", function () { c.selectPatient("destroy") }), r(".js-programmatic-multi-set-val").on("click", function () { l.val(["CA", "AL"]).trigger("change") }), r(".js-programmatic-multi-clear").on("click", function () { l.val(null).trigger("change") }); function i(e, t) { return 0 === t.toUpperCase().indexOf(e.toUpperCase()) } function o(e) { return e.id ? r('<span><img src="../../../app-assets/images/flags/' + e.element.value.toLowerCase() + '.png" class="img-flag" /> ' + e.text + "</span>") : e.text } r(".selectPatient-data-array").selectPatient({ data: [{ id: 0, text: "enhancement" }, { id: 1, text: "bug" }, { id: 2, text: "duplicate" }, { id: 3, text: "invalid" }, { id: 4, text: "wontfix" }] }), r(".selectPatient-data-ajax").selectPatient({ placeholder: "Loading remote data", ajax: { url: "http://api.github.com/search/repositories", dataType: "json", delay: 250, data: function (e) { return { q: e.term, page: e.page } }, processResults: function (e, t) { return t.page = t.page || 1, { results: e.items, pagination: { more: 30 * t.page < e.total_count } } }, cache: !0 }, escapeMarkup: function (e) { return e }, minimumInputLength: 1, templateResult: function (e) { if (e.loading) return e.text; var t = "<div class='selectPatient-result-repository clearfix'><div class='selectPatient-result-repository__avatar'><img src='" + e.owner.avatar_url + "' /></div><div class='selectPatient-result-repository__meta'><div class='selectPatient-result-repository__title'>" + e.full_name + "</div>"; e.description && (t += "<div class='selectPatient-result-repository__description'>" + e.description + "</div>"); return t += "<div class='selectPatient-result-repository__statistics'><div class='selectPatient-result-repository__forks'><i class='fa fa-code-branch mr-0'></i> " + e.forks_count + " Forks</div><div class='selectPatient-result-repository__stargazers'><i class='fa fa-star mr-0'></i> " + e.stargazers_count + " Stars</div><div class='selectPatient-result-repository__watchers'><i class='fa fa-eye mr-0'></i> " + e.watchers_count + " Watchers</div></div></div></div>" }, templateSelection: function (e) { return e.full_name || e.text } }), r(".selectPatient-tags").selectPatient({ tags: !0 }), r(".selectPatient-tokenizer").selectPatient({ tags: !0, tokenSeparators: [",", " "] }), r.fn.selectPatient.amd.require(["selectPatient/compat/matcher"], function (e) { r(".selectPatient-customize-result").selectPatient({ placeholder: "Search by 'a'", matcher: e(i) }) }), r(".selectPatient-language").selectPatient({ language: "es" }),
            r(".selectPatient-rtl").selectPatient({ placeholder: "RTL Select", dir: "rtl" }),
            r(".selectPatient-diacritics").selectPatient({ placeholder: "Type 'aero'" }),
            r(".selectPatient-theme").selectPatient({ placeholder: "Classic Theme", theme: "classic" }),
            r(".selectPatient-templating").selectPatient({ templateResult: o, templateSelection: o }), r(".selectPatient-size-lg").selectPatient({ containerCssClass: "select-lg" }), r(".selectPatient-size-sm").selectPatient({ containerCssClass: "select-sm" }), r(".selectPatient-size-xs").selectPatient({ containerCssClass: "select-xs" }), r(".selectPatient-bg").each(function (e, t) { var s = "", a = "", c = r(this).data("bgcolor"); s = r(this).data("bgcolor-variation"), "" !== (a = r(this).data("text-variation")) && (a = " " + a), "" !== s && (s = " bg-" + s); var l = "bg-" + c + s + " " + r(this).data("text-color") + a + " border-" + c + " border-darken-2 "; r(this).selectPatient({ containerCssClass: l }) }), r(".selectPatient-border").each(function (e, t) { var s = "", a = "", c = r(this).data("border-color"); "" !== (a = r(this).data("text-variation")) && (a = " " + a), "" !== (s = r(this).data("border-variation")) && (s = " border-" + s); var l = "border-" + c + " " + s + " " + r(this).data("text-color") + a; r(this).selectPatient({ containerCssClass: l }) }), r(".selectPatient-menu-bg").each(function (e, t) { var s = "", a = "", c = r(this).data("bgcolor"); "" !== (s = r(this).data("bgcolor-variation")) && (s = " bg-" + s), "" !== (a = r(this).data("text-variation")) && (a = " " + a); var l = "bg-" + c + s + " " + r(this).data("text-color") + a + " border-" + c + " border-darken-2 "; r(this).selectPatient({ dropdownCssClass: l }) }), r(".selectPatient-full-bg").each(function (e, t) { var s = "", a = "", c = r(this).data("bgcolor"); "" !== (s = r(this).data("bgcolor-variation")) && (s = " bg-" + s), "" !== (a = r(this).data("text-variation")) && (a = " " + a); var l = "bg-" + c + s + " " + r(this).data("text-color") + a + " border-" + c + " border-darken-2 "; r(this).selectPatient({ containerCssClass: l, dropdownCssClass: l }) }), r("select[data-text-color]").each(function (e, t) { var s, a = r(this).data("text-color"); "" !== (s = r(this).data("text-variation")) && (s = " " + s), r(this).next(".selectPatient").find(".selectPatient-selection__rendered").addClass(a + s) })
}(window, document, jQuery);


